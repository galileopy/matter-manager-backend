// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  username     String    @unique
  email        String?   @unique
  role         Role      @default(USER)
  firstName    String
  lastName     String
  abbreviation String    @unique
  deletedAt    DateTime?

  pdfJobs       PdfJob[]
  internalNotes InternalNote[]
  comments      Comment[]
  assignments   MatterAssignment[]
}

enum Role {
  USER
  ADMIN
}

model Client {
  id        String     @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  suffix    String?
  type      ClientType @default(NON_ASSOCIATION)
  deletedAt DateTime?

  emailAddresses          EmailAddress[]
  matters                 Matter[]
  distributionListClients DistributionListClient[]
  emailSends              EmailSend[]
}

enum ClientType {
  ASSOCIATION
  NON_ASSOCIATION
}

model EmailAddress {
  id               String    @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  client           Client    @relation(fields: [clientId], references: [id])
  clientId         String    @db.Uuid
  memberName       String
  email            String
  shouldSendReport Boolean
  deletedAt        DateTime?
}

model MatterStatus {
  id      String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  status  String   @unique
  matters Matter[]
}

model Matter {
  id         String       @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  status     MatterStatus @relation(fields: [statusId], references: [id])
  statusId   String       @db.Uuid
  client     Client       @relation(fields: [clientId], references: [id])
  clientId   String       @db.Uuid
  project    String?
  fileNumber String
  closedAt   DateTime?
  deletedAt  DateTime?

  internalNotes InternalNote[]
  comments      Comment[]
  assignments   MatterAssignment[]
}

model InternalNote {
  id          String    @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  note        String
  addedByUser User      @relation(fields: [addedBy], references: [id])
  addedBy     String    @db.Uuid
  matter      Matter    @relation(fields: [matterId], references: [id])
  matterId    String    @db.Uuid
  deletedAt   DateTime?
}

model Comment {
  id        String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt DateTime @default(now())

  comment     String
  addedByUser User?   @relation(fields: [addedBy], references: [id])
  addedBy     String? @db.Uuid
  matter      Matter  @relation(fields: [matterId], references: [id])
  matterId    String  @db.Uuid
}

model MatterAssignment {
  id         String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt  DateTime @default(now())
  assignedBy String?

  matter   Matter @relation(fields: [matterId], references: [id])
  matterId String @db.Uuid

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
}

model SmtpConfig {
  id        String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt DateTime @default(now())

  host                  String
  port                  Int
  secure                Boolean
  requireTLS            Boolean
  maxConnections        Int
  tlsRejectUnauthorized Boolean
  tlsCiphers            String
  service               String
  user                  String
  pass                  String

  testEmail String?
}

model EmailTemplate {
  id        String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String  @unique
  body              String?
  subjectPreText    String?
  includeClientName Boolean
  subjectPostText   String?

  deletedAt DateTime?

  pdfJobs PdfJob[]
}

model DistributionList {
  id        String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String    @unique
  deletedAt DateTime?

  distributionClientsList DistributionListClient[]
  pdfJobs                 PdfJob[]
}

model DistributionListClient {
  id        String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt DateTime @default(now())

  deletedAt DateTime?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String @db.Uuid

  distributionList   DistributionList @relation(fields: [distributionListId], references: [id])
  distributionListId String           @db.Uuid
}

model PdfJob {
  id        String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cc String?

  distributionList   DistributionList @relation(fields: [distributionListId], references: [id])
  distributionListId String           @db.Uuid

  emailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])
  emailTemplateId String?        @db.Uuid

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  type JobType @default(NO_REPORT_EMAIL)

  date       String?     @default("hello world")
  statusIds  String[]
  emailSends EmailSend[]
}

enum EmailSendStatus {
  REQUESTED
  SENT
  FAILED
  ATTACHMENT_GENERATED
  ATTACHMENT_FAILED
  LEGACY
}

model EmailSend {
  id        String   @id @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  error String?

  status     EmailSendStatus @default(LEGACY)
  retryCount Int             @default(0)

  pdfJob   PdfJob @relation(fields: [pdfJobId], references: [id])
  pdfJobId String @db.Uuid

  client   Client @relation(fields: [clientId], references: [id])
  clientId String @db.Uuid
}

enum JobType {
  REPORT_EMAIL
  NO_REPORT_EMAIL
}
